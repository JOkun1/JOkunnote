function MainComponent() {
  const [tweets, setTweets] = React.useState([]);
  const [newTweet, setNewTweet] = React.useState('');
  const [showConfirmation, setShowConfirmation] = React.useState(false);
  const [imageResults, setImageResults] = React.useState({});
  const [translations, setTranslations] = React.useState({});

  const handleTweetSubmit = (e) => {
    e.preventDefault();
    if (newTweet.trim()) {
      setShowConfirmation(true);
    }
  };

  const confirmTweet = async () => {
    const tweetId = Date.now();
    setTweets([{ id: tweetId, content: newTweet }, ...tweets]);
    setNewTweet('');
    setShowConfirmation(false);

    try {
      const imageResponse = await fetch(`/integrations/image-search/imagesearch?q=${encodeURIComponent(newTweet)}`, {
        method: 'GET',
      });
      const imageData = await imageResponse.json();
      if (imageData.status === 'success' && imageData.items.length > 0) {
        setImageResults(prevState => ({
          ...prevState,
          [tweetId]: imageData.items[0].thumbnailImageUrl
        }));
      }

      const translateResponse = await fetch('/integrations/google-translate/language/translate/v2', {
        method: 'POST',
        body: new URLSearchParams({
          q: newTweet,
          target: 'en',
          source: 'ja'
        }),
      });
      const translateData = await translateResponse.json();
      if (translateData.data && translateData.data.translations) {
        setTranslations(prevState => ({
          ...prevState,
          [tweetId]: translateData.data.translations[0].translatedText
        }));
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const cancelTweet = () => {
    setShowConfirmation(false);
  };

  return (
    <div className="min-h-screen bg-[#15202B] text-white font-roboto">
      <header className="bg-[#1DA1F2] p-4">
        <h1 className="text-2xl font-bold">TwitterっぽいUI</h1>
      </header>
      <main className="container mx-auto p-4">
        <form onSubmit={handleTweetSubmit} className="mb-6">
          <textarea
            name="tweet"
            value={newTweet}
            onChange={(e) => setNewTweet(e.target.value)}
            placeholder="いまどうしてる？"
            className="w-full p-2 rounded-lg bg-[#192734] border border-[#38444D] focus:outline-none focus:border-[#1DA1F2]"
            rows="3"
          ></textarea>
          <button
            type="submit"
            className="mt-2 px-4 py-2 bg-[#1DA1F2] text-white rounded-full font-bold hover:bg-[#1A91DA]"
          >
            ツイート
          </button>
        </form>
        {showConfirmation && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div className="bg-[#192734] p-6 rounded-lg">
              <p className="mb-4">本当にこの内容でいいですか？</p>
              <div className="flex justify-end space-x-2">
                <button
                  onClick={cancelTweet}
                  className="px-4 py-2 bg-[#38444D] text-white rounded-full"
                >
                  いいえ
                </button>
                <button
                  onClick={confirmTweet}
                  className="px-4 py-2 bg-[#1DA1F2] text-white rounded-full"
                >
                  はい
                </button>
              </div>
            </div>
          </div>
        )}
        <div className="space-y-4">
          {tweets.map((tweet) => (
            <div key={tweet.id} className="p-4 bg-[#192734] rounded-lg border border-[#38444D]">
              <p>{tweet.content}</p>
              {translations[tweet.id] && (
                <p className="text-sm text-gray-400 mt-1">{translations[tweet.id]}</p>
              )}
              {imageResults[tweet.id] && (
                <img 
                  src={imageResults[tweet.id]} 
                  alt="ツイートの内容に関連する画像" 
                  className="mt-2 rounded-lg max-w-full h-auto"
                />
              )}
            </div>
          ))}
        </div>
      </main>
    </div>
  );
}


